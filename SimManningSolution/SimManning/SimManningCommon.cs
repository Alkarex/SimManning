#define NO_STRINGS	//To use the same algorithms than systems that cannot use string. Faster anyway without strings.

using System;
using System.Text;

namespace SimManning
{
	/// <summary>
	/// Collection of global constants and static extensions.
	/// </summary>
	public static class SimManningCommon
	{
		public const bool InternalEngineAllowed = true;
		public const string ErrorMessageInternalEngineNotAllowed = "The internal simulation engine is not included in this version of the SimManning library!";

		/// <summary>
		/// Minimal value that can be generated by Math.Log taking a double as a parameter: -744.44007192138122
		/// </summary>
		/// <remarks>Called EXP_LIMIT_L in java.lang.StrictMath</remarks>
		internal static readonly double LogMinValue = Math.Log(Double.Epsilon);

		/// <summary>
		/// Get the number of digits in an integer number.
		/// For instance, 137 has 3 digits.
		/// </summary>
		/// <param name="code">The integer number to analyse</param>
		/// <returns>The number of digits in the given integer number.</returns>
		public static int NbDigits(this int code)
		{//Would be nicer as a property extension (e.g. number.NBDigits without parentheses) if C# supported it.
			return (int)(Math.Log10(code) + 1);
		}

		/// <summary>
		/// Return the first part of a "accounting-like" code (a positive integer in base 10).
		/// For instance the level 1 of code 357 is 3, its level 2 is 35, level 3 or more is 357.
		/// </summary>
		/// <param name="code">A code (ex: 357)</param>
		/// <param name="level">A code level (ex: 2). Default value is 1.</param>
		/// <returns>The subcode (ex: 35) of the provided code, at the provided level.</returns>
		public static int SubCode(this int code, int level = 1)
		{
			if (code <= 0 || level <= 0) return 0;
			#if (NO_STRINGS)
				var nbDigits = code.NbDigits();
				if (level >= nbDigits) return code;
				return (int)(code / Math.Pow(10, nbDigits - level));
			#else
				var sCode = code.ToString();
				return sCode.Length >= level ? Int32.Parse(sCode.Substring(0, level)) : code;
			#endif
		}

		/// <summary>
		/// Return a digit of a "accounting-like" code (a positive integer in base 10).
		/// For instance the digit level 2 of code 357 is 5, its level 3 is 7, level 4 or more is 0.
		/// </summary>
		/// <param name="code">A code (ex: 357)</param>
		/// <param name="digitLevel">A code digit level (ex: 2). Default value is 1.</param>
		/// <returns>The subcode digit (ex: 5) of the provided code, at the provided level.</returns>
		public static int SubCodeDigit(this int code, int digitLevel = 1)
		{
			if (code <= 0 || digitLevel <= 0) return 0;
			#if (NO_STRINGS)
				var nbDigits = code.NbDigits();
				if (digitLevel > nbDigits) return 0;
				var x = Math.Floor(code / Math.Pow(10, nbDigits - digitLevel)) / 10.0;
				return (int)((x - Math.Floor(x)) * 10.0);
			#else
				var sCode = code.ToString();
				return sCode.Length >= digitLevel ? byte.Parse(sCode[digitLevel - 1].ToString()) : (byte)0;
			#endif
		}

		/// <summary>
		/// Test if the first code is a sub-code of the second code (a positive integer in base 10).
		/// For instance, the code 357 is a sub-code (i.e. more specialised/precise), than the code 37 (more general).
		/// </summary>
		/// <param name="code">A code (ex: 357)</param>
		/// <param name="code2">Another code (ex: 35)</param>
		/// <returns><code>true</code> if <para>code</para> is a sub-code of <para>code2</para> (ex: 357 is a subcode of 35), <code>false</code> otherwise (ex: 357 is not a subcode of 400, or of 3571)</returns>
		public static bool IsSubCodeOf(this int code, int code2)
		{
			if (code <= 0 || code2 <= 0) return false;
			#if (NO_STRINGS)
				var nbDigits1 = code.NbDigits();
				var nbDigits2 = code2.NbDigits();
				if (nbDigits2 > nbDigits1) return false;
				return code2 == (int)(code / Math.Pow(10, nbDigits1 - nbDigits2));
			#else
				return code.ToString().StartsWith(code2.ToString());
			#endif
		}

		/// <summary>
		/// Test if the first code is a sub-code of the second code (a positive integer in base 10).
		/// For instance, the code 357 is a sub-code (i.e. more specialised/precise), than the code 37 (more general).
		/// </summary>
		/// <param name="code">A special code (ex: 357)</param>
		/// <param name="code2">A special code (ex: Task.SpecialTaskType.Undefined)</param>
		/// <returns><code>true</code> if <para>code</para> is a sub-code of <para>code2</para> (ex: 357 is a subcode of 35), <code>false</code> otherwise (ex: 357 is not a subcode of 400, or of 3571)</returns>
		public static bool IsSubCodeOf(this int code, StandardTaskType code2)
		{
			return code.IsSubCodeOf((int)code2);
		}
	}
}
